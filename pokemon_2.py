# -*- coding: utf-8 -*-
"""Pokemon 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16NJB-wUt4oueqtcWhfHjG6Ntlfv3aFj1
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering
from sklearn.metrics import silhouette_score
from sklearn.metrics import calinski_harabasz_score
from sklearn.metrics import davies_bouldin_score

#from google.colab import files
#uploaded = files.upload()

dataset = pd.read_csv('https://storage.googleapis.com/kagglesdsdata/datasets/121/280/Pokemon.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20210118%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210118T133028Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=59594e78c7dace4d2b5b5bdb6a1031b55f337709aae9f673df8b2ecbd483dc92a14f940ad5add034fc98089d2ce8f906bb22a549904efaccd11683b5d49e3ee65d52e86f237196a67c8096163fe0b4c6cce87564994e25cc27661bb4478a0dfd5ae02fa167b8c8b8cb3c35131fba9ee78bf24dd7314dbb9d6094a4f40ce57601f519a8d385459b27c7e8d2d7707bbbc572e278bc740ef99f13533c6ab64f32815db3a09267924db2c5903d692e418f7f5bbe569f49da87f33f746dd05c544547a3263cd7195fd69f3c92d208e82339e22bc114537a91df9b857fd6904fdbc3880d8aedd74dda987d9552587e3c390343bdff39417097c98a762b6f6024d3fba4')
dataset

#dataset.head()

#dataset.tail()

# Dropping non-integer features.
dataset2 = dataset.drop(['#', 'Name', 'Type 1', 'Type 2', 
                         'Generation', 'Legendary'], axis = 1)

dataset2.shape

dataset2.dtypes

#sns.pairplot(dataset2[['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']])
plt.show()

X = dataset2.values
# Using the standard scaler method to standardize all of the features by converting them into values between 0 and 10
X = StandardScaler(with_mean=False).fit_transform(X)

# Implementing T-Distributed Stochastic Network Embedding.
tsne = TSNE()
X_ = tsne.fit_transform(X)

X_

# Creating a dataframe featuring the two t-sne components that we acquired through t-SNE.
tsne_dataset1 = pd.DataFrame( data = X_, columns = ['component1', 'component2'] )
tsne_dataset1.head()

# Extracting the two features from above in order to add them to the dataframe.
tsne_component1 = tsne_dataset1['component1']
tsne_component2 = tsne_dataset1['component2']

# Visualizing the effects of the T-distributed Stochastic Neighbour Embedding.
plt.figure()
plt.figure(figsize=(10,10))
plt.xlabel('Component 1')
plt.ylabel('Component 2')

plt.title('2 Component TSNE')
plt.scatter(tsne_component1, tsne_component2)

# Implementing a dendogram to visualize the euclidean distance between each data point.
dendrogram = sch.dendrogram(sch.linkage(X_, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('Data Points')
plt.ylabel('Euclidean distances')
plt.show()

# Implementing the Hierachical Clustering.
model = AgglomerativeClustering(n_clusters = 6, affinity = 'euclidean', linkage = 'ward')
y_hat = model.fit(X_)
y_hat2 = model.fit_predict(X_)

score_AGclustering_s = silhouette_score(X_, y_hat.labels_, metric='euclidean')
score_AGclustering_c = calinski_harabasz_score(X_, y_hat.labels_)
score_AGclustering_d = davies_bouldin_score(X_, y_hat2)
print('Silhouette Score:        %.4f' % score_AGclustering_s)
print('Calinski Harabasz Score: %.4f' % score_AGclustering_c)
print('Davies Bouldin Score:    %.4f' % score_AGclustering_d)

# Plotting the clusters.
plt.scatter(X_[y_hat2 == 0, 0],   X_[y_hat2 == 0, 1],   s = 100, c = 'red',         label = 'Cluster 1')
plt.scatter(X_[y_hat2 == 1, 0],   X_[y_hat2 == 1, 1],   s = 100, c = 'blue',        label = 'Cluster 2')
plt.scatter(X_[y_hat2 == 2, 0],   X_[y_hat2 == 2, 1],   s = 100, c = 'green',       label = 'Cluster 3')
plt.scatter(X_[y_hat2 == 3, 0],   X_[y_hat2 == 3, 1],   s = 100, c = 'cyan',        label = 'Cluster 4')
plt.scatter(X_[y_hat2 == 4, 0],   X_[y_hat2 == 4, 1],   s = 100, c = 'magenta',     label = 'Cluster 5')
plt.scatter(X_[y_hat2 == 5, 0],   X_[y_hat2 == 5, 1],   s = 100, c = 'limegreen',   label = 'Cluster 6')
plt.scatter(X_[y_hat2 == 6, 0],   X_[y_hat2 == 6, 1],   s = 100, c = 'lavender',    label = 'Cluster 7')
plt.scatter(X_[y_hat2 == 7, 0],   X_[y_hat2 == 7, 1],   s = 100, c = 'black',       label = 'Cluster 8')
plt.scatter(X_[y_hat2 == 8, 0],   X_[y_hat2 == 8, 1],   s = 100, c = 'chocolate',   label = 'Cluster 9')
plt.scatter(X_[y_hat2 == 9, 0],   X_[y_hat2 == 9, 1],   s = 100, c = 'crimson',     label = 'Cluster 10')
plt.scatter(X_[y_hat2 == 10, 0],  X_[y_hat2 == 10, 1],  s = 100, c = 'gainsboro',   label = 'Cluster 11')
plt.scatter(X_[y_hat2 == 11, 0],  X_[y_hat2 == 11, 1],  s = 100, c = 'white',       label = 'Cluster 12')
plt.scatter(X_[y_hat2 == 12, 0],  X_[y_hat2 == 12, 1],  s = 100, c = 'whitesmoke',  label = 'Cluster 13')
plt.scatter(X_[y_hat2 == 13, 0],  X_[y_hat2 == 13, 1],  s = 100, c = 'rosybrown',   label = 'Cluster 14')
plt.scatter(X_[y_hat2 == 14, 0],  X_[y_hat2 == 14, 1],  s = 100, c = 'indianred',   label = 'Cluster 15')
plt.scatter(X_[y_hat2 == 15, 0],  X_[y_hat2 == 15, 1],  s = 100, c = 'firebrick',   label = 'Cluster 16')
plt.scatter(X_[y_hat2 == 16, 0],  X_[y_hat2 == 16, 1],  s = 100, c = 'silver',      label = 'Cluster 17')
plt.scatter(X_[y_hat2 == 17, 0],  X_[y_hat2 == 17, 1],  s = 100, c = 'mistyrose',   label = 'Cluster 18')
plt.scatter(X_[y_hat2 == 18, 0],  X_[y_hat2 == 18, 1],  s = 100, c = 'salmon',      label = 'Cluster 19')
plt.scatter(X_[y_hat2 == 19, 0],  X_[y_hat2 == 19, 1],  s = 100, c = 'darksalmon',  label = 'Cluster 20')
plt.scatter(X_[y_hat2 == 20, 0],  X_[y_hat2 == 20, 1],  s = 100, c = 'coral',       label = 'Cluster 21')
plt.scatter(X_[y_hat2 == 21, 0],  X_[y_hat2 == 21, 1],  s = 100, c = 'orangered',   label = 'Cluster 22')
plt.scatter(X_[y_hat2 == 22, 0],  X_[y_hat2 == 22, 1],  s = 100, c = 'sienna',      label = 'Cluster 23')
plt.scatter(X_[y_hat2 == 23, 0],  X_[y_hat2 == 23, 1],  s = 100, c = 'seashell',    label = 'Cluster 24')
plt.scatter(X_[y_hat2 == 24, 0],  X_[y_hat2 == 24, 1],  s = 100, c = 'dimgray',     label = 'Cluster 25')
plt.scatter(X_[y_hat2 == 25, 0],  X_[y_hat2 == 25, 1],  s = 100, c = 'saddlebrown', label = 'Cluster 26')
plt.scatter(X_[y_hat2 == 26, 0],  X_[y_hat2 == 26, 1],  s = 100, c = 'sandybrown',  label = 'Cluster 27')
plt.scatter(X_[y_hat2 == 27, 0],  X_[y_hat2 == 27, 1],  s = 100, c = 'peachpuff',   label = 'Cluster 28')
plt.scatter(X_[y_hat2 == 28, 0],  X_[y_hat2 == 28, 1],  s = 100, c = 'peru',        label = 'Cluster 29')
plt.scatter(X_[y_hat2 == 29, 0],  X_[y_hat2 == 29, 1],  s = 100, c = 'bisque',      label = 'Cluster 30')
plt.scatter(X_[y_hat2 == 30, 0],  X_[y_hat2 == 30, 1],  s = 100, c = 'linen',       label = 'Cluster 31')
plt.scatter(X_[y_hat2 == 31, 0],  X_[y_hat2 == 31, 1],  s = 100, c = 'darkorange',  label = 'Cluster 32')
plt.scatter(X_[y_hat2 == 32, 0],  X_[y_hat2 == 32, 1],  s = 100, c = 'burlywood',   label = 'Cluster 33')
plt.scatter(X_[y_hat2 == 33, 0],  X_[y_hat2 == 33, 1],  s = 100, c = 'antiquewhite',label = 'Cluster 34')
plt.scatter(X_[y_hat2 == 34, 0],  X_[y_hat2 == 34, 1],  s = 100, c = 'tan',         label = 'Cluster 35')
plt.scatter(X_[y_hat2 == 35, 0],  X_[y_hat2 == 35, 1],  s = 100, c = 'navajowhite', label = 'Cluster 36')
plt.scatter(X_[y_hat2 == 36, 0],  X_[y_hat2 == 36, 1],  s = 100, c = 'orange',      label = 'Cluster 37')
plt.scatter(X_[y_hat2 == 37, 0],  X_[y_hat2 == 37, 1],  s = 100, c = 'oldlace',     label = 'Cluster 38')
plt.scatter(X_[y_hat2 == 38, 0],  X_[y_hat2 == 38, 1],  s = 100, c = 'dodgerblue',  label = 'Cluster 39')
plt.scatter(X_[y_hat2 == 39, 0],  X_[y_hat2 == 39, 1],  s = 100, c = 'goldenrod',   label = 'Cluster 40')
plt.title('Clusters of Pokemon Characters')
plt.xlabel('t-SNE Component 1')
plt.ylabel('t-SNE Component 2')
plt.show()